Given a string s, you can transform every letter individually to be lowercase or uppercase to create another string.

Return a list of all possible strings we could create. Return the output in any order.

 

Example 1:

Input: s = "a1b2"
Output: ["a1b2","a1B2","A1b2","A1B2"]
Example 2:

Input: s = "3z4"
Output: ["3z4","3Z4"]
 

Constraints:

1 <= s.length <= 12
s consists of lowercase English letters, uppercase English letters, and digits.

solution:
class Solution {
public:
    void findpermutation(string s,int idx,vector<string> &ans)
    {
        if(idx==s.size())
        {
            ans.push_back(s);
            return ;
        }
        if(s[idx]>=65 && s[idx]<=90)
        {
            char ch=s[idx];
            s[idx]=tolower(s[idx]);
            findpermutation(s,idx+1,ans);
            s[idx]=ch;
        }else  if(s[idx]>=97 && s[idx]<=122)
        {
            char ch=s[idx];
            s[idx]=toupper(s[idx]);
            findpermutation(s,idx+1,ans);
            s[idx]=ch;
        }
        findpermutation(s,idx+1,ans);
    }
    vector<string> letterCasePermutation(string s) {
        vector<string> ans;
        findpermutation(s,0,ans);
        return ans;
    }
};
