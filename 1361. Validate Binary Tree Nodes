link:https://leetcode.com/problems/validate-binary-tree-nodes/
You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.

If node i has no left child then leftChild[i] will equal -1, similarly for the right child.

Note that the nodes have no values and that we only use the node numbers in this problem.

 

Example 1:


Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]
Output: true
Example 2:


Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]
Output: false
Example 3:


Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]
Output: false
 

Constraints:

n == leftChild.length == rightChild.length
1 <= n <= 104
-1 <= leftChild[i], rightChild[i] <= n - 1
solution:
class Solution {
public:
    int findparent(vector<int> &parent,int n)
    {
        if(parent[n]==n) return n;
        return parent[n]=findparent(parent,parent[n]);
    }
    bool unionp(vector<int> &rank,vector<int> &parent,int x,int y)
    {
        int xset=findparent(parent,x);
        int yset=findparent(parent,y);
        if(xset==yset) return true;
        if(rank[xset]<rank[yset]) parent[xset]=yset;
        else if(rank[xset]>rank[yset]) parent[yset]=xset;
        else {
            parent[yset]=xset;
            rank[xset]++;
        }
        return false;
    }
    bool validateBinaryTreeNodes(int n, vector<int>& leftchild, vector<int>& rightchild) {
        vector<int> parent(n);
        vector<int> rank(n,0);
        vector<int> indegree(n,0);
        for(int i=0;i<n;i++)
        {
                parent[i]=i;
        }
        for(int i=0;i<n;i++)
        {
            if(leftchild[i]!=-1)
            {
                indegree[leftchild[i]]++;
               if(unionp(rank,parent,i,leftchild[i])) return false;
            }
            
        }
         for(int i=0;i<n;i++)
        {
            
            if(rightchild[i]!=-1)
            {
                indegree[rightchild[i]]++;
                 if(unionp(rank,parent,i,rightchild[i])) return false;
            }
        }
        int count=0;
        for(int i=0;i<n;i++)
        {
            if(indegree[i]>1) return false;
            if(indegree[i]==0) count++;
        }
        if(count!=1) return false;
        return true;
    }
};
